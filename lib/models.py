# flake8: noqa E501
# generated by datamodel-codegen:
#   filename:  workflow.json
#   timestamp: 2024-08-05T09:21:05+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List

from pydantic.v1 import AnyUrl, BaseModel, Extra, Field, confloat, constr


class DataInputSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    schema_: constr(min_length=1) = Field(
        ...,
        alias='schema',
        description='URI of the JSON Schema used to validate the workflow data input',
    )
    failOnValidationErrors: bool = Field(
        ...,
        description='Determines if workflow execution should continue if there are validation errors',
    )


class Secrets(BaseModel):
    __root__: AnyUrl | List[str]


class WorkflowExecTimeout1(BaseModel):
    class Config:
        extra = Extra.forbid

    duration: constr(min_length=1) = Field(
        ...,
        description="Workflow execution timeout duration (ISO 8601 duration format). If not specified should be 'unlimited'",
    )
    interrupt: bool | None = Field(
        True,
        description='If `false`, workflow instance is allowed to finish current execution. If `true`, current workflow execution is abrupted.',
    )
    runBefore: constr(min_length=1) | None = Field(
        None,
        description='Name of a workflow state to be executed before workflow instance is terminated',
    )


class WorkflowExecTimeout(BaseModel):
    __root__: constr(min_length=1) | WorkflowExecTimeout1


class StateExecTimeout1(BaseModel):
    class Config:
        extra = Extra.forbid

    single: constr(min_length=1) | None = Field(
        None,
        description='Single state execution timeout, not including retries (ISO 8601 duration format)',
    )
    total: constr(min_length=1) = Field(
        ...,
        description='Total state execution timeout, including retries (ISO 8601 duration format)',
    )


class StateExecTimeout(BaseModel):
    __root__: constr(min_length=1) | StateExecTimeout1


class ActionExecTimeout(BaseModel):
    __root__: constr(min_length=1) = Field(
        ...,
        description='Single actions definition execution timeout duration (ISO 8601 duration format)',
    )


class BranchExecTimeout(BaseModel):
    __root__: constr(min_length=1) = Field(
        ...,
        description='Single branch execution timeout duration (ISO 8601 duration format)',
    )


class EventTimeout(BaseModel):
    __root__: constr(min_length=1) = Field(
        ...,
        description='Timeout duration to wait for consuming defined events (ISO 8601 duration format)',
    )


class Errordef(BaseModel):
    class Config:
        extra = Extra.forbid

    name: constr(min_length=1) = Field(..., description='Domain-specific error name')
    code: constr(min_length=1) | None = Field(
        None,
        description="Error code. Can be used in addition to the name to help runtimes resolve to technical errors/exceptions. Should not be defined if error is set to '*'",
    )
    description: str | None = Field(None, description='Error description')


class Metadata(BaseModel):
    __root__: Dict[str, str] | None = None


class Kind(Enum):
    consumed = 'consumed'
    produced = 'produced'


class CorrelationDef(BaseModel):
    class Config:
        extra = Extra.forbid

    contextAttributeName: constr(min_length=1) = Field(
        ..., description='CloudEvent Extension Context Attribute name'
    )
    contextAttributeValue: constr(min_length=1) | None = Field(
        None, description='CloudEvent Extension Context Attribute value'
    )


class Type(Enum):
    rest = 'rest'
    asyncapi = 'asyncapi'
    rpc = 'rpc'
    graphql = 'graphql'
    odata = 'odata'
    expression = 'expression'
    custom = 'custom'


class Function(BaseModel):
    class Config:
        extra = Extra.forbid

    name: constr(min_length=1) = Field(..., description='Unique function name')
    operation: constr(min_length=1) = Field(
        ...,
        description='If type is `rest`, <path_to_openapi_definition>#<operation_id>. If type is `asyncapi`, <path_to_asyncapi_definition>#<operation_id>. If type is `rpc`, <path_to_grpc_proto_file>#<service_name>#<service_method>. If type is `graphql`, <url_to_graphql_endpoint>#<literal \\"mutation\\" or \\"query\\">#<query_or_mutation_name>. If type is `odata`, <URI_to_odata_service>#<Entity_Set_Name>. If type is `expression`, defines the workflow expression.',
    )
    type: Type | None = Field(
        'rest',
        description='Defines the function type. Is either `rest`, `asyncapi, `rpc`, `graphql`, `odata`, `expression`, or `custom`. Default is `rest`',
    )
    authRef: constr(min_length=1) | None = Field(
        None,
        description='References an auth definition name to be used to access to resource defined in the operation parameter',
    )
    metadata: Metadata | None = None


class Retrydef(BaseModel):
    class Config:
        extra = Extra.forbid

    name: constr(min_length=1) = Field(..., description='Unique retry strategy name')
    delay: str | None = Field(
        None, description='Time delay between retry attempts (ISO 8601 duration format)'
    )
    maxDelay: str | None = Field(
        None,
        description='Maximum time delay between retry attempts (ISO 8601 duration format)',
    )
    increment: str | None = Field(
        None,
        description='Static value by which the delay increases during each attempt (ISO 8601 time format)',
    )
    multiplier: confloat(ge=0.0, multiple_of=0.01) | constr(min_length=1) | None = (
        Field(
            None,
            description='Numeric value, if specified the delay between retries is multiplied by this value.',
        )
    )
    maxAttempts: confloat(ge=1.0) | constr(min_length=0) = Field(
        ..., description='Maximum number of retry attempts.'
    )
    jitter: confloat(ge=0.0, le=1.0) | str | None = Field(
        None,
        description='If float type, maximum amount of random time added or subtracted from the delay between each retry relative to total delay (between 0 and 1). If string type, absolute maximum amount of random time added or subtracted from the delay between each retry (ISO 8601 duration format)',
    )


class Scheme(Enum):
    basic = 'basic'
    bearer = 'bearer'
    oauth2 = 'oauth2'


class Basicpropsdef(BaseModel):
    class Config:
        extra = Extra.forbid

    username: constr(min_length=1) = Field(
        ..., description='String or a workflow expression. Contains the user name'
    )
    password: constr(min_length=1) = Field(
        ..., description='String or a workflow expression. Contains the user password'
    )
    metadata: Metadata | None = None


class Bearerpropsdef(BaseModel):
    class Config:
        extra = Extra.forbid

    token: constr(min_length=1) = Field(
        ..., description='String or a workflow expression. Contains the token'
    )
    metadata: Metadata | None = None


class GrantType(Enum):
    password = 'password'
    clientCredentials = 'clientCredentials'
    tokenExchange = 'tokenExchange'


class Oauth2propsdef(BaseModel):
    authority: constr(min_length=1) | None = Field(
        None,
        description='String or a workflow expression. Contains the authority information',
    )
    grantType: GrantType = Field(..., description='Defines the grant type')
    clientId: constr(min_length=1) = Field(
        ...,
        description='String or a workflow expression. Contains the client identifier',
    )
    clientSecret: constr(min_length=1) | None = Field(
        None,
        description='Workflow secret or a workflow expression. Contains the client secret',
    )
    scopes: List[str] | None = Field(
        None,
        description='Array containing strings or workflow expressions. Contains the OAuth2 scopes',
        min_items=1,
    )
    username: constr(min_length=1) | None = Field(
        None,
        description="String or a workflow expression. Contains the user name. Used only if grantType is 'resourceOwner'",
    )
    password: constr(min_length=1) | None = Field(
        None,
        description="String or a workflow expression. Contains the user password. Used only if grantType is 'resourceOwner'",
    )
    audiences: List[str] | None = Field(
        None,
        description='Array containing strings or workflow expressions. Contains the OAuth2 audiences',
        min_items=1,
    )
    subjectToken: constr(min_length=1) | None = Field(
        None, description='String or a workflow expression. Contains the subject token'
    )
    requestedSubject: constr(min_length=1) | None = Field(
        None,
        description='String or a workflow expression. Contains the requested subject',
    )
    requestedIssuer: constr(min_length=1) | None = Field(
        None,
        description='String or a workflow expression. Contains the requested issuer',
    )
    metadata: Metadata | None = None


class Sleep1(BaseModel):
    before: str = Field(
        ...,
        description="Amount of time (ISO 8601 duration format) to sleep before function/subflow invocation. Does not apply if 'eventRef' is defined.",
    )
    after: str | None = Field(
        None,
        description="Amount of time (ISO 8601 duration format) to sleep after function/subflow invocation. Does not apply if 'eventRef' is defined.",
    )


class Sleep2(BaseModel):
    before: str | None = Field(
        None,
        description="Amount of time (ISO 8601 duration format) to sleep before function/subflow invocation. Does not apply if 'eventRef' is defined.",
    )
    after: str = Field(
        ...,
        description="Amount of time (ISO 8601 duration format) to sleep after function/subflow invocation. Does not apply if 'eventRef' is defined.",
    )


class Sleep3(BaseModel):
    before: str = Field(
        ...,
        description="Amount of time (ISO 8601 duration format) to sleep before function/subflow invocation. Does not apply if 'eventRef' is defined.",
    )
    after: str = Field(
        ...,
        description="Amount of time (ISO 8601 duration format) to sleep after function/subflow invocation. Does not apply if 'eventRef' is defined.",
    )


class Sleep(BaseModel):
    __root__: Sleep1 | Sleep2 | Sleep3


class Crondef1(BaseModel):
    class Config:
        extra = Extra.forbid

    expression: constr(min_length=1) = Field(
        ...,
        description='Repeating interval (cron expression) describing when the workflow instance should be created',
    )
    validUntil: str | None = Field(
        None,
        description='Specific date and time (ISO 8601 format) when the cron expression invocation is no longer valid',
    )


class Crondef(BaseModel):
    __root__: constr(min_length=1) | Crondef1


class Continueasdef1(BaseModel):
    workflowId: str = Field(
        ..., description='Unique id of the workflow to continue execution as'
    )
    version: constr(min_length=1) | None = Field(
        None, description='Version of the workflow to continue execution as'
    )
    data: str | Dict[str, Any] | None = Field(
        None,
        description='If string type, an expression which selects parts of the states data output to become the workflow data input of continued execution. If object type, a custom object to become the workflow data input of the continued execution',
    )
    workflowExecTimeout: WorkflowExecTimeout | None = Field(
        None,
        description='Workflow execution timeout to be used by the workflow continuing execution. Overwrites any specific settings set by that workflow',
    )


class Continueasdef(BaseModel):
    __root__: constr(min_length=1) | Continueasdef1


class ActionMode(Enum):
    sequential = 'sequential'
    parallel = 'parallel'


class Invoke(Enum):
    sync = 'sync'
    async_ = 'async'


class Functionref1(BaseModel):
    class Config:
        extra = Extra.forbid

    refName: str = Field(..., description='Name of the referenced function')
    arguments: Dict[str, Any] | None = Field(
        None, description='Function arguments/inputs'
    )
    selectionSet: str | None = Field(
        None,
        description="Only used if function type is 'graphql'. A string containing a valid GraphQL selection set",
    )
    invoke: Invoke | None = Field(
        'sync', description='Specifies if the function should be invoked sync or async'
    )


class Functionref(BaseModel):
    __root__: constr(min_length=1) | Functionref1


class Eventref(BaseModel):
    class Config:
        extra = Extra.forbid

    triggerEventRef: str = Field(
        ..., description="Reference to the unique name of a 'produced' event definition"
    )
    resultEventRef: str = Field(
        ..., description="Reference to the unique name of a 'consumed' event definition"
    )
    resultEventTimeout: str | None = Field(
        None,
        description='Maximum amount of time (ISO 8601 format) to wait for the result event. If not defined it should default to the actionExecutionTimeout',
    )
    data: str | Dict[str, Any] | None = Field(
        None,
        description="If string type, an expression which selects parts of the states data output to become the data (payload) of the event referenced by 'triggerEventRef'. If object type, a custom object to become the data (payload) of the event referenced by 'triggerEventRef'.",
    )
    contextAttributes: Dict[str, str] | None = Field(
        None,
        description='Add additional extension context attributes to the produced event',
    )
    invoke: Invoke | None = Field(
        'sync',
        description='Specifies if the function should be invoked sync or async. Default is sync.',
    )


class OnParentComplete(Enum):
    continue_ = 'continue'
    terminate = 'terminate'


class Subflowref1(BaseModel):
    workflowId: str = Field(
        ..., description='Unique id of the sub-workflow to be invoked'
    )
    version: constr(min_length=1) | None = Field(
        None, description='Version of the sub-workflow to be invoked'
    )
    onParentComplete: OnParentComplete | None = Field(
        'terminate',
        description="If invoke is 'async', specifies how subflow execution should behave when parent workflow completes. Default is 'terminate'",
    )
    invoke: Invoke | None = Field(
        'sync', description='Specifies if the subflow should be invoked sync or async'
    )


class Subflowref(BaseModel):
    __root__: constr(min_length=1) | Subflowref1


class Timeouts2(BaseModel):
    actionExecTimeout: ActionExecTimeout | None = None
    branchExecTimeout: BranchExecTimeout | None = None


class Timeouts3(BaseModel):
    stateExecTimeout: StateExecTimeout | None = None


class Timeouts4(BaseModel):
    stateExecTimeout: StateExecTimeout | None = None
    actionExecTimeout: ActionExecTimeout | None = None
    eventTimeout: EventTimeout | None = None


class Timeouts6(BaseModel):
    stateExecTimeout: StateExecTimeout | None = None
    actionExecTimeout: ActionExecTimeout | None = None


class Timeouts7(BaseModel):
    stateExecTimeout: StateExecTimeout | None = None
    branchExecTimeout: BranchExecTimeout | None = None


class CompletionType(Enum):
    allOf = 'allOf'
    atLeast = 'atLeast'


class Timeouts8(BaseModel):
    stateExecTimeout: StateExecTimeout | None = None
    eventTimeout: EventTimeout | None = None


class Timeouts9(BaseModel):
    stateExecTimeout: StateExecTimeout | None = None


class Timeouts11(BaseModel):
    stateExecTimeout: StateExecTimeout | None = None
    actionExecTimeout: ActionExecTimeout | None = None


class Mode(Enum):
    sequential = 'sequential'
    parallel = 'parallel'


class Timeouts12(BaseModel):
    stateExecTimeout: StateExecTimeout | None = None
    actionExecTimeout: ActionExecTimeout | None = None
    eventTimeout: EventTimeout | None = None


class Schedule1(BaseModel):
    class Config:
        extra = Extra.forbid

    interval: constr(min_length=1) = Field(
        ...,
        description='Time interval (must be repeating interval) described with ISO 8601 format. Declares when workflow instances will be automatically created.',
    )
    cron: Crondef | None = None
    timezone: str | None = Field(
        None,
        description='Timezone name used to evaluate the interval & cron-expression. (default: UTC)',
    )


class Schedule2(BaseModel):
    class Config:
        extra = Extra.forbid

    interval: constr(min_length=1) | None = Field(
        None,
        description='Time interval (must be repeating interval) described with ISO 8601 format. Declares when workflow instances will be automatically created.',
    )
    cron: Crondef
    timezone: str | None = Field(
        None,
        description='Timezone name used to evaluate the interval & cron-expression. (default: UTC)',
    )


class Schedule(BaseModel):
    __root__: constr(min_length=1) | Schedule1 | Schedule2


class Produceeventdef(BaseModel):
    class Config:
        extra = Extra.forbid

    eventRef: str = Field(..., description='References a name of a defined event')
    data: str | Dict[str, Any] | None = Field(
        None,
        description='If String, expression which selects parts of the states data output to become the data of the produced event. If object a custom object to become the data of produced event.',
    )
    contextAttributes: Dict[str, str] | None = Field(
        None, description='Add additional event extension context attributes'
    )


class Statedatafilter(BaseModel):
    class Config:
        extra = Extra.forbid

    input: str | None = Field(
        None, description='Workflow expression to filter the state data input'
    )
    output: str | None = Field(
        None, description='Workflow expression that filters the state data output'
    )


class Eventdatafilter(BaseModel):
    class Config:
        extra = Extra.forbid

    useData: bool | None = Field(
        True,
        description="If set to false, event payload is not added/merged to state data. In this case 'data' and 'toStateData' should be ignored. Default is true.",
    )
    data: str | None = Field(
        None,
        description="Workflow expression that filters the received event payload (default: '${ . }')",
    )
    toStateData: str | None = Field(
        None,
        description=' Workflow expression that selects a state data element to which the filtered event should be added/merged into. If not specified, denotes, the top-level state data element.',
    )


class Actiondatafilter(BaseModel):
    class Config:
        extra = Extra.forbid

    fromStateData: str | None = Field(
        None,
        description='Workflow expression that selects state data that the state action can use',
    )
    useResults: bool | None = Field(
        True,
        description="If set to false, action data results are not added/merged to state data. In this case 'results' and 'toStateData' should be ignored. Default is true.",
    )
    results: str | None = Field(
        None, description='Workflow expression that filters the actions data results'
    )
    toStateData: str | None = Field(
        None,
        description='Workflow expression that selects a state data element to which the action results should be added/merged into. If not specified, denote, the top-level state data element',
    )


class Timeouts1(BaseModel):
    class Config:
        extra = Extra.forbid

    workflowExecTimeout: WorkflowExecTimeout | None = None
    stateExecTimeout: StateExecTimeout | None = None
    actionExecTimeout: ActionExecTimeout | None = None
    branchExecTimeout: BranchExecTimeout | None = None
    eventTimeout: EventTimeout | None = None


class Timeouts(BaseModel):
    __root__: AnyUrl | Timeouts1


class Errors(BaseModel):
    __root__: AnyUrl | List[Errordef]


class Eventdef(BaseModel):
    class Config:
        extra = Extra.forbid

    name: constr(min_length=1) | None = Field(None, description='Unique event name')
    source: str | None = Field(None, description='CloudEvent source')
    type: str | None = Field(None, description='CloudEvent type')
    kind: Kind | None = Field(
        'consumed',
        description="Defines the CloudEvent as either 'consumed' or 'produced' by the workflow. Default is 'consumed'",
    )
    correlation: List[CorrelationDef] | None = Field(
        None, description='CloudEvent correlation definitions', min_items=1
    )
    dataOnly: bool | None = Field(
        True,
        description='If `true`, only the Event payload is accessible to consuming Workflow states. If `false`, both event payload and context attributes should be accessible ',
    )
    metadata: Metadata | None = Field(None, description='Metadata information')


class Functions(BaseModel):
    __root__: AnyUrl | List[Function]


class Retries(BaseModel):
    __root__: AnyUrl | List[Retrydef]


class Authdef(BaseModel):
    name: constr(min_length=1) = Field(..., description='Unique auth definition name')
    scheme: Scheme | None = Field('basic', description='Defines the auth type')
    properties: str | Basicpropsdef | Bearerpropsdef | Oauth2propsdef


class Transition1(BaseModel):
    class Config:
        extra = Extra.forbid

    nextState: constr(min_length=1) = Field(
        ..., description='Name of state to transition to'
    )
    produceEvents: List[Produceeventdef] | None = Field(
        None, description='Array of events to be produced before the transition happens'
    )
    compensate: bool | None = Field(
        False,
        description='If set to true, triggers workflow compensation when before this transition is taken. Default is false',
    )


class Transition(BaseModel):
    __root__: constr(min_length=1) | Transition1


class Action1(BaseModel):
    class Config:
        extra = Extra.forbid

    id: str | None = Field(None, description='Unique action identifier')
    name: str | None = Field(None, description='Unique action definition name')
    functionRef: Functionref = Field(
        ..., description='References a function to be invoked'
    )
    eventRef: Eventref | None = Field(
        None,
        description="References a 'trigger' and 'result' reusable event definitions",
    )
    subFlowRef: Subflowref | None = Field(
        None, description='References a sub-workflow to invoke'
    )
    sleep: Sleep | None = Field(
        None,
        description='Defines time periods workflow execution should sleep before / after function execution',
    )
    retryRef: str | None = Field(
        None,
        description='References a defined workflow retry definition. If not defined the default retry policy is assumed',
    )
    nonRetryableErrors: List[str] | None = Field(
        None,
        description='List of unique references to defined workflow errors for which the action should not be retried. Used only when `autoRetries` is set to `true`',
        min_items=1,
    )
    retryableErrors: List[str] | None = Field(
        None,
        description='List of unique references to defined workflow errors for which the action should be retried. Used only when `autoRetries` is set to `false`',
        min_items=1,
    )
    actionDataFilter: Actiondatafilter | None = Field(
        None, description='Action data filter'
    )
    condition: constr(min_length=1) | None = Field(
        None,
        description='Expression, if defined, must evaluate to true for this action to be performed. If false, action is disregarded',
    )


class Action2(BaseModel):
    class Config:
        extra = Extra.forbid

    id: str | None = Field(None, description='Unique action identifier')
    name: str | None = Field(None, description='Unique action definition name')
    functionRef: Functionref | None = Field(
        None, description='References a function to be invoked'
    )
    eventRef: Eventref = Field(
        ...,
        description="References a 'trigger' and 'result' reusable event definitions",
    )
    subFlowRef: Subflowref | None = Field(
        None, description='References a sub-workflow to invoke'
    )
    sleep: Sleep | None = Field(
        None,
        description='Defines time periods workflow execution should sleep before / after function execution',
    )
    retryRef: str | None = Field(
        None,
        description='References a defined workflow retry definition. If not defined the default retry policy is assumed',
    )
    nonRetryableErrors: List[str] | None = Field(
        None,
        description='List of unique references to defined workflow errors for which the action should not be retried. Used only when `autoRetries` is set to `true`',
        min_items=1,
    )
    retryableErrors: List[str] | None = Field(
        None,
        description='List of unique references to defined workflow errors for which the action should be retried. Used only when `autoRetries` is set to `false`',
        min_items=1,
    )
    actionDataFilter: Actiondatafilter | None = Field(
        None, description='Action data filter'
    )
    condition: constr(min_length=1) | None = Field(
        None,
        description='Expression, if defined, must evaluate to true for this action to be performed. If false, action is disregarded',
    )


class Action3(BaseModel):
    class Config:
        extra = Extra.forbid

    id: str | None = Field(None, description='Unique action identifier')
    name: str | None = Field(None, description='Unique action definition name')
    functionRef: Functionref | None = Field(
        None, description='References a function to be invoked'
    )
    eventRef: Eventref | None = Field(
        None,
        description="References a 'trigger' and 'result' reusable event definitions",
    )
    subFlowRef: Subflowref = Field(
        ..., description='References a sub-workflow to invoke'
    )
    sleep: Sleep | None = Field(
        None,
        description='Defines time periods workflow execution should sleep before / after function execution',
    )
    retryRef: str | None = Field(
        None,
        description='References a defined workflow retry definition. If not defined the default retry policy is assumed',
    )
    nonRetryableErrors: List[str] | None = Field(
        None,
        description='List of unique references to defined workflow errors for which the action should not be retried. Used only when `autoRetries` is set to `true`',
        min_items=1,
    )
    retryableErrors: List[str] | None = Field(
        None,
        description='List of unique references to defined workflow errors for which the action should be retried. Used only when `autoRetries` is set to `false`',
        min_items=1,
    )
    actionDataFilter: Actiondatafilter | None = Field(
        None, description='Action data filter'
    )
    condition: constr(min_length=1) | None = Field(
        None,
        description='Expression, if defined, must evaluate to true for this action to be performed. If false, action is disregarded',
    )


class Action(BaseModel):
    __root__: Action1 | Action2 | Action3


class Branch(BaseModel):
    class Config:
        extra = Extra.forbid

    name: str = Field(..., description='Branch name')
    timeouts: Timeouts2 | None = Field(None, description='State specific timeouts')
    actions: List[Action] = Field(
        ..., description='Actions to be executed in this branch'
    )


class Transitioneventcondition(BaseModel):
    class Config:
        extra = Extra.forbid

    name: str | None = Field(None, description='Event condition name')
    eventRef: str = Field(
        ...,
        description='References an unique event name in the defined workflow events',
    )
    transition: Transition = Field(
        ..., description='Next transition of the workflow if there is valid matches'
    )
    eventDataFilter: Eventdatafilter | None = Field(
        None, description='Event data filter definition'
    )
    metadata: Metadata | None = None


class Transitiondatacondition(BaseModel):
    class Config:
        extra = Extra.forbid

    name: str | None = Field(None, description='Data condition name')
    condition: str = Field(
        ...,
        description='Workflow expression evaluated against state data. Must evaluate to true or false',
    )
    transition: Transition = Field(
        ..., description='Workflow transition if condition is evaluated to true'
    )
    metadata: Metadata | None = None


class Startdef1(BaseModel):
    class Config:
        extra = Extra.forbid

    stateName: constr(min_length=1) = Field(
        ..., description='Name of the starting workflow state'
    )
    schedule: Schedule = Field(
        ...,
        description='Define the time/repeating intervals or cron at which workflow instances should be automatically started.',
    )


class Startdef(BaseModel):
    __root__: constr(min_length=1) | Startdef1


class End1(BaseModel):
    class Config:
        extra = Extra.forbid

    terminate: bool | None = Field(
        False,
        description='If true, completes all execution flows in the given workflow instance',
    )
    produceEvents: List[Produceeventdef] | None = Field(
        None, description='Defines events that should be produced'
    )
    compensate: bool | None = Field(
        False,
        description='If set to true, triggers workflow compensation. Default is false',
    )
    continueAs: Continueasdef | None = None


class End(BaseModel):
    __root__: bool | End1


class Events(BaseModel):
    __root__: AnyUrl | List[Eventdef]


class Auth(BaseModel):
    __root__: AnyUrl | List[Authdef]


class Error1(BaseModel):
    class Config:
        extra = Extra.forbid

    errorRef: constr(min_length=1) = Field(
        ...,
        description='Reference to a unique workflow error definition. Used of errorRefs is not used',
    )
    errorRefs: List[str] | None = Field(
        None,
        description='References one or more workflow error definitions. Used if errorRef is not used',
        min_items=1,
    )
    transition: Transition = Field(
        ..., description='Transition to next state to handle the error.'
    )
    end: End | None = Field(
        None, description='End workflow execution in case of this error.'
    )


class Error2(BaseModel):
    class Config:
        extra = Extra.forbid

    errorRef: constr(min_length=1) = Field(
        ...,
        description='Reference to a unique workflow error definition. Used of errorRefs is not used',
    )
    errorRefs: List[str] | None = Field(
        None,
        description='References one or more workflow error definitions. Used if errorRef is not used',
        min_items=1,
    )
    transition: Transition | None = Field(
        None, description='Transition to next state to handle the error.'
    )
    end: End = Field(..., description='End workflow execution in case of this error.')


class Error3(BaseModel):
    class Config:
        extra = Extra.forbid

    errorRef: constr(min_length=1) | None = Field(
        None,
        description='Reference to a unique workflow error definition. Used of errorRefs is not used',
    )
    errorRefs: List[str] = Field(
        ...,
        description='References one or more workflow error definitions. Used if errorRef is not used',
        min_items=1,
    )
    transition: Transition = Field(
        ..., description='Transition to next state to handle the error.'
    )
    end: End | None = Field(
        None, description='End workflow execution in case of this error.'
    )


class Error4(BaseModel):
    class Config:
        extra = Extra.forbid

    errorRef: constr(min_length=1) | None = Field(
        None,
        description='Reference to a unique workflow error definition. Used of errorRefs is not used',
    )
    errorRefs: List[str] = Field(
        ...,
        description='References one or more workflow error definitions. Used if errorRef is not used',
        min_items=1,
    )
    transition: Transition | None = Field(
        None, description='Transition to next state to handle the error.'
    )
    end: End = Field(..., description='End workflow execution in case of this error.')


class Error(BaseModel):
    __root__: Error1 | Error2 | Error3 | Error4


class Onevents(BaseModel):
    class Config:
        extra = Extra.forbid

    eventRefs: List[str] = Field(
        ...,
        description='References one or more unique event names in the defined workflow events',
        min_items=1,
        unique_items=True,
    )
    actionMode: ActionMode | None = Field(
        'sequential',
        description='Specifies how actions are to be performed (in sequence or in parallel)',
    )
    actions: List[Action] | None = Field(
        None, description='Actions to be performed if expression matches'
    )
    eventDataFilter: Eventdatafilter | None = Field(
        None, description='Event data filter'
    )


class Sleepstate(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(min_length=1) | None = Field(None, description='Unique State id')
    name: str | None = Field(None, description='State name')
    type: str = Field('sleep', const=True, description='State type')
    end: End | None = Field(None, description='State end definition')
    stateDataFilter: Statedatafilter | None = Field(
        None, description='State data filter'
    )
    duration: str | None = Field(
        None, description='Duration (ISO 8601 duration format) to sleep'
    )
    timeouts: Timeouts3 | None = Field(None, description='State specific timeouts')
    onErrors: List[Error] | None = Field(
        None, description='States error handling definitions'
    )
    transition: Transition | None = Field(
        None, description='Next transition of the workflow after the workflow sleep'
    )
    compensatedBy: constr(min_length=1) | None = Field(
        None,
        description='Unique Name of a workflow state which is responsible for compensation of this state',
    )
    usedForCompensation: bool | None = Field(
        False,
        description='If true, this state is used to compensate another state. Default is false',
    )
    metadata: Metadata | None = None


class Eventstate1(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(min_length=1) | None = Field(None, description='Unique State id')
    name: str = Field(..., description='State name')
    type: str = Field('event', const=True, description='State type')
    exclusive: bool | None = Field(
        True,
        description='If true consuming one of the defined events causes its associated actions to be performed. If false all of the defined events must be consumed in order for actions to be performed',
    )
    onEvents: List[Onevents] = Field(
        ...,
        description='Define the events to be consumed and optional actions to be performed',
    )
    timeouts: Timeouts4 | None = Field(None, description='State specific timeouts')
    stateDataFilter: Statedatafilter | None = Field(
        None, description='State data filter'
    )
    onErrors: List[Error] | None = Field(
        None, description='States error handling definitions'
    )
    transition: Transition | None = Field(
        None,
        description='Next transition of the workflow after all the actions have been performed',
    )
    end: End = Field(..., description='State end definition')
    compensatedBy: constr(min_length=1) | None = Field(
        None,
        description='Unique Name of a workflow state which is responsible for compensation of this state',
    )
    metadata: Metadata | None = None


class Eventstate2(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(min_length=1) | None = Field(None, description='Unique State id')
    name: str = Field(..., description='State name')
    type: str = Field('event', const=True, description='State type')
    exclusive: bool | None = Field(
        True,
        description='If true consuming one of the defined events causes its associated actions to be performed. If false all of the defined events must be consumed in order for actions to be performed',
    )
    onEvents: List[Onevents] = Field(
        ...,
        description='Define the events to be consumed and optional actions to be performed',
    )
    timeouts: Timeouts4 | None = Field(None, description='State specific timeouts')
    stateDataFilter: Statedatafilter | None = Field(
        None, description='State data filter'
    )
    onErrors: List[Error] | None = Field(
        None, description='States error handling definitions'
    )
    transition: Transition = Field(
        ...,
        description='Next transition of the workflow after all the actions have been performed',
    )
    end: End | None = Field(None, description='State end definition')
    compensatedBy: constr(min_length=1) | None = Field(
        None,
        description='Unique Name of a workflow state which is responsible for compensation of this state',
    )
    metadata: Metadata | None = None


class Eventstate(BaseModel):
    __root__: Eventstate1 | Eventstate2 = Field(
        ...,
        description='This state is used to wait for events from event sources, then consumes them and invoke one or more actions to run in sequence or parallel',
    )


class Operationstate(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(min_length=1) | None = Field(None, description='Unique State id')
    name: str | None = Field(None, description='State name')
    type: str = Field('operation', const=True, description='State type')
    end: End | None = Field(None, description='State end definition')
    stateDataFilter: Statedatafilter | None = Field(
        None, description='State data filter'
    )
    actionMode: ActionMode | None = Field(
        'sequential',
        description='Specifies whether actions are performed in sequence or in parallel',
    )
    actions: List[Action] | None = Field(None, description='Actions to be performed')
    timeouts: Timeouts6 | None = Field(None, description='State specific timeouts')
    onErrors: List[Error] | None = Field(
        None, description='States error handling definitions'
    )
    transition: Transition | None = Field(
        None,
        description='Next transition of the workflow after all the actions have been performed',
    )
    compensatedBy: constr(min_length=1) | None = Field(
        None,
        description='Unique Name of a workflow state which is responsible for compensation of this state',
    )
    usedForCompensation: bool | None = Field(
        False,
        description='If true, this state is used to compensate another state. Default is false',
    )
    metadata: Metadata | None = None


class Parallelstate(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(min_length=1) | None = Field(None, description='Unique State id')
    name: str | None = Field(None, description='State name')
    type: str = Field('parallel', const=True, description='State type')
    end: End | None = Field(None, description='State end definition')
    stateDataFilter: Statedatafilter | None = Field(
        None, description='State data filter'
    )
    timeouts: Timeouts7 | None = Field(None, description='State specific timeouts')
    branches: List[Branch] | None = Field(None, description='Branch Definitions')
    completionType: CompletionType | None = Field(
        'allOf', description='Option types on how to complete branch execution.'
    )
    numCompleted: confloat(ge=0.0) | constr(min_length=0) | None = Field(
        None,
        description="Used when completionType is set to 'atLeast' to specify the minimum number of branches that must complete before the state will transition.",
    )
    onErrors: List[Error] | None = Field(
        None, description='States error handling definitions'
    )
    transition: Transition | None = Field(
        None,
        description='Next transition of the workflow after all branches have completed execution',
    )
    compensatedBy: constr(min_length=1) | None = Field(
        None,
        description='Unique Name of a workflow state which is responsible for compensation of this state',
    )
    usedForCompensation: bool | None = Field(
        False,
        description='If true, this state is used to compensate another state. Default is false',
    )
    metadata: Metadata | None = None


class Defaultconditiondef1(BaseModel):
    class Config:
        extra = Extra.forbid

    transition: Transition
    end: End | None = None


class Defaultconditiondef2(BaseModel):
    class Config:
        extra = Extra.forbid

    transition: Transition | None = None
    end: End


class Defaultconditiondef(BaseModel):
    __root__: Defaultconditiondef1 | Defaultconditiondef2 = Field(
        ...,
        description='DefaultCondition definition. Can be either a transition or end definition',
    )


class Enddeventcondition(BaseModel):
    class Config:
        extra = Extra.forbid

    name: str | None = Field(None, description='Event condition name')
    eventRef: str = Field(
        ...,
        description='References an unique event name in the defined workflow events',
    )
    end: End = Field(..., description='Explicit transition to end')
    eventDataFilter: Eventdatafilter | None = Field(
        None, description='Event data filter definition'
    )
    metadata: Metadata | None = None


class Enddatacondition(BaseModel):
    class Config:
        extra = Extra.forbid

    name: str | None = Field(None, description='Data condition name')
    condition: str = Field(
        ...,
        description='Workflow expression evaluated against state data. Must evaluate to true or false',
    )
    end: End = Field(..., description='Workflow end definition')
    metadata: Metadata | None = None


class Injectstate(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(min_length=1) | None = Field(None, description='Unique state id')
    name: str | None = Field(None, description='State name')
    type: str = Field('inject', const=True, description='State type')
    end: End | None = Field(None, description='State end definition')
    data: Dict[str, Any] | None = Field(
        None,
        description='JSON object which can be set as states data input and can be manipulated via filters',
    )
    timeouts: Timeouts9 | None = Field(None, description='State specific timeouts')
    stateDataFilter: Statedatafilter | None = Field(
        None, description='State data filter'
    )
    transition: Transition | None = Field(
        None,
        description='Next transition of the workflow after injection has completed',
    )
    compensatedBy: constr(min_length=1) | None = Field(
        None,
        description='Unique Name of a workflow state which is responsible for compensation of this state',
    )
    usedForCompensation: bool | None = Field(
        False,
        description='If true, this state is used to compensate another state. Default is false',
    )
    metadata: Metadata | None = None


class Foreachstate(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(min_length=1) | None = Field(None, description='Unique State id')
    name: str | None = Field(None, description='State name')
    type: str = Field('foreach', const=True, description='State type')
    end: End | None = Field(None, description='State end definition')
    inputCollection: str | None = Field(
        None,
        description='Workflow expression selecting an array element of the states data',
    )
    outputCollection: str | None = Field(
        None,
        description='Workflow expression specifying an array element of the states data to add the results of each iteration',
    )
    iterationParam: str | None = Field(
        None,
        description='Name of the iteration parameter that can be referenced in actions/workflow. For each parallel iteration, this param should contain an unique element of the inputCollection array',
    )
    batchSize: confloat(ge=0.0) | constr(min_length=0) | None = Field(
        None,
        description="Specifies how many iterations may run in parallel at the same time. Used if 'mode' property is set to 'parallel' (default)",
    )
    actions: List[Action] | None = Field(
        None,
        description='Actions to be executed for each of the elements of inputCollection',
    )
    timeouts: Timeouts11 | None = Field(None, description='State specific timeouts')
    stateDataFilter: Statedatafilter | None = Field(
        None, description='State data filter'
    )
    onErrors: List[Error] | None = Field(
        None, description='States error handling definitions'
    )
    transition: Transition | None = Field(
        None, description='Next transition of the workflow after state has completed'
    )
    compensatedBy: constr(min_length=1) | None = Field(
        None,
        description='Unique Name of a workflow state which is responsible for compensation of this state',
    )
    usedForCompensation: bool | None = Field(
        False,
        description='If true, this state is used to compensate another state. Default is false',
    )
    mode: Mode | None = Field(
        'parallel',
        description='Specifies how iterations are to be performed (sequentially or in parallel)',
    )
    metadata: Metadata | None = None


class Callbackstate(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(min_length=1) | None = Field(None, description='Unique state id')
    name: str | None = Field(None, description='State name')
    type: str = Field('callback', const=True, description='State type')
    action: Action | None = Field(None, description='Defines the action to be executed')
    eventRef: str | None = Field(
        None,
        description='References an unique callback event name in the defined workflow events',
    )
    timeouts: Timeouts12 | None = Field(None, description='State specific timeouts')
    eventDataFilter: Eventdatafilter | None = Field(
        None, description='Event data filter'
    )
    stateDataFilter: Statedatafilter | None = Field(
        None, description='State data filter'
    )
    onErrors: List[Error] | None = Field(
        None, description='States error handling definitions'
    )
    transition: Transition | None = Field(
        None,
        description='Next transition of the workflow after all the actions have been performed',
    )
    end: End | None = Field(None, description='State end definition')
    compensatedBy: constr(min_length=1) | None = Field(
        None,
        description='Unique Name of a workflow state which is responsible for compensation of this state',
    )
    usedForCompensation: bool | None = Field(
        False,
        description='If true, this state is used to compensate another state. Default is false',
    )
    metadata: Metadata | None = None


class Eventcondition(BaseModel):
    __root__: Transitioneventcondition | Enddeventcondition


class Datacondition(BaseModel):
    __root__: Transitiondatacondition | Enddatacondition


class Eventbasedswitchstate(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(min_length=1) | None = Field(None, description='Unique State id')
    name: str = Field(..., description='State name')
    type: str = Field('switch', const=True, description='State type')
    stateDataFilter: Statedatafilter | None = Field(
        None, description='State data filter'
    )
    timeouts: Timeouts8 | None = Field(None, description='State specific timeouts')
    eventConditions: List[Eventcondition] = Field(
        ..., description='Defines conditions evaluated against events'
    )
    onErrors: List[Error] | None = Field(
        None, description='States error handling definitions'
    )
    defaultCondition: Defaultconditiondef = Field(
        ...,
        description='Default transition of the workflow if there is no matching data conditions. Can include a transition or end definition',
    )
    compensatedBy: constr(min_length=1) | None = Field(
        None,
        description='Unique Name of a workflow state which is responsible for compensation of this state',
    )
    usedForCompensation: bool | None = Field(
        False,
        description='If true, this state is used to compensate another state. Default is false',
    )
    metadata: Metadata | None = None


class Databasedswitchstate(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(min_length=1) | None = Field(None, description='Unique State id')
    name: str = Field(..., description='State name')
    type: str = Field('switch', const=True, description='State type')
    stateDataFilter: Statedatafilter | None = Field(
        None, description='State data filter'
    )
    timeouts: Timeouts9 | None = Field(None, description='State specific timeouts')
    dataConditions: List[Datacondition] = Field(
        ..., description='Defines conditions evaluated against state data'
    )
    onErrors: List[Error] | None = Field(
        None, description='States error handling definitions'
    )
    defaultCondition: Defaultconditiondef = Field(
        ...,
        description='Default transition of the workflow if there is no matching data conditions. Can include a transition or end definition',
    )
    compensatedBy: constr(min_length=1) | None = Field(
        None,
        description='Unique Name of a workflow state which is responsible for compensation of this state',
    )
    usedForCompensation: bool | None = Field(
        False,
        description='If true, this state is used to compensate another state. Default is false',
    )
    metadata: Metadata | None = None


class Switchstate(BaseModel):
    __root__: Databasedswitchstate | Eventbasedswitchstate


class Model1(BaseModel):
    id: constr(min_length=1) = Field(..., description='Workflow unique identifier')
    key: constr(min_length=1) | None = Field(
        None, description='Domain-specific workflow identifier'
    )
    name: constr(min_length=1) | None = Field(None, description='Workflow name')
    description: str | None = Field(None, description='Workflow description')
    version: constr(min_length=1) | None = Field(None, description='Workflow version')
    annotations: List[str] | None = Field(
        None,
        description='List of helpful terms describing the workflows intended purpose, subject areas, or other important qualities',
        min_items=1,
    )
    dataInputSchema: constr(min_length=1) | DataInputSchema | None = None
    secrets: Secrets | None = None
    constants: AnyUrl | Dict[str, Any] | None = None
    start: Startdef | None = None
    specVersion: constr(min_length=1) = Field(
        ..., description='Serverless Workflow schema version'
    )
    expressionLang: constr(min_length=1) | None = Field(
        'jq',
        description="Identifies the expression language used for workflow expressions. Default is 'jq'",
    )
    timeouts: Timeouts | None = None
    errors: Errors | None = None
    keepActive: bool | None = Field(
        False,
        description="If 'true', workflow instances is not terminated when there are no active execution paths. Instance can be terminated via 'terminate end definition' or reaching defined 'workflowExecTimeout'",
    )
    metadata: Metadata | None = None
    events: Events | None = None
    functions: Functions | None = None
    autoRetries: bool | None = Field(
        False,
        description='If set to true, actions should automatically be retried on unchecked errors. Default is false',
    )
    retries: Retries | None = None
    auth: Auth | None = None
    states: List[
        Sleepstate
        | Eventstate
        | Operationstate
        | Parallelstate
        | Switchstate
        | Injectstate
        | Foreachstate
        | Callbackstate
    ] = Field(..., description='State definitions', min_items=1)


class Model2(BaseModel):
    id: constr(min_length=1) | None = Field(
        None, description='Workflow unique identifier'
    )
    key: constr(min_length=1) = Field(
        ..., description='Domain-specific workflow identifier'
    )
    name: constr(min_length=1) | None = Field(None, description='Workflow name')
    description: str | None = Field(None, description='Workflow description')
    version: constr(min_length=1) | None = Field(None, description='Workflow version')
    annotations: List[str] | None = Field(
        None,
        description='List of helpful terms describing the workflows intended purpose, subject areas, or other important qualities',
        min_items=1,
    )
    dataInputSchema: constr(min_length=1) | DataInputSchema | None = None
    secrets: Secrets | None = None
    constants: AnyUrl | Dict[str, Any] | None = None
    start: Startdef | None = None
    specVersion: constr(min_length=1) = Field(
        ..., description='Serverless Workflow schema version'
    )
    expressionLang: constr(min_length=1) | None = Field(
        'jq',
        description="Identifies the expression language used for workflow expressions. Default is 'jq'",
    )
    timeouts: Timeouts | None = None
    errors: Errors | None = None
    keepActive: bool | None = Field(
        False,
        description="If 'true', workflow instances is not terminated when there are no active execution paths. Instance can be terminated via 'terminate end definition' or reaching defined 'workflowExecTimeout'",
    )
    metadata: Metadata | None = None
    events: Events | None = None
    functions: Functions | None = None
    autoRetries: bool | None = Field(
        False,
        description='If set to true, actions should automatically be retried on unchecked errors. Default is false',
    )
    retries: Retries | None = None
    auth: Auth | None = None
    states: List[
        Sleepstate
        | Eventstate
        | Operationstate
        | Parallelstate
        | Switchstate
        | Injectstate
        | Foreachstate
        | Callbackstate
    ] = Field(..., description='State definitions', min_items=1)


class Model(BaseModel):
    __root__: Model1 | Model2 = Field(
        ..., description='Serverless Workflow specification - workflow schema'
    )
